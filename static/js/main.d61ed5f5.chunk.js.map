{"version":3,"sources":["hooks/useRememberedState.js","components/ConfigController/ConfigKeys.js","components/ConfigController/ConfigController.js","components/ConfigController/useAuth.js","components/ConfigController/useSelectedRepos.js","helpers/mapToGroups.js","Apollo.js","hooks/useTailwind.js","components/Layout.js","components/Layout.styles.js","hooks/queries/useUserRepos.js","components/RepoList.js","components/RepoList.styles.js","components/RepoPicker.js","components/RepoPicker.styles.js","components/TokenGate.js","components/TokenGate.styles.js","components/PullRequests/StatusIcon.js","components/PullRequests/StatusIcon.styles.js","hooks/useContrastingColor.js","components/PullRequests/Labels.js","components/PullRequests/Labels.styles.js","components/PullRequests/PullRequest.js","components/PullRequests/PullRequest.styles.js","components/PullRequests/PullRequests.js","components/PullRequests/PullRequests.styles.js","index.js","App.js"],"names":["loadState","key","initial","str","stored","localStorage","getItem","JSON","parse","saveState","value","setItem","obj","stringify","useRememberedState","name","useRef","useState","current","state","setState","useEffect","ConfigKeys","ConfigContext","createContext","useConfig","useContext","ConfigController","children","auth","token","setToken","useMemo","useAuth","selectedRepos","repos","setRepos","groupedRepos","keyGetter","repo","owner","login","reduce","acc","item","index","push","repoKeys","map","nameWithOwner","containsRepo","includes","addRepo","rs","removeRepo","filter","r","useSelectedRepos","config","Provider","Apollo","cache","InMemoryCache","link","HttpLink","uri","headers","authorization","client","ApolloClient","useTailwind","styleSheet","Object","entries","styles","Array","isArray","join","Layout","container","className","USER_REPOS","gql","RepoList","onRepoClick","removable","imageContainer","removeOverlay","removeIcon","image","text","TransitionGroup","CSSTransition","timeout","classNames","onClick","src","avatarUrl","alt","RepoPicker","onChoose","useQuery","data","rest","viewer","repositories","nodes","useUserRepos","loading","error","e","preventDefault","length","TokenGate","form","input","button","href","target","rel","onSubmit","type","onChange","placeholder","StatusIcon","status","icon","Icon","COMMENTED","ChatBubbleRoundedIcon","CHANGES_REQUESTED","RateReviewRoundedIcon","APPROVED","CheckRoundedIcon","bgClass","textClass","style","right","bottom","fontSize","getContrastingColor","color","hex","fullHex","replace","m","g","b","exec","n","parseInt","hexToRgb","Math","round","Labels","labels","tag","label","background","PullRequest","pullRequest","preTitle","ownerAvatar","titleBar","title","author","authorAvatar","authorName","timestamps","reviewers","review","reviewerAvatar","reviewStatus","created","format","parseISO","createdAt","updated","updatedAt","id","repository","permalink","reviews","GET_PULL_REQUESTS","PullRequests","pullRequests","query","variables","search","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d61ed5f5.chunk.js","sourcesContent":["import { useEffect, useState, useRef } from 'react';\n\nconst serialize = obj => JSON.stringify(obj);\nconst deserialze = str => JSON.parse(str);\n\nconst loadState = (key, initial) => {\n  const stored = localStorage.getItem(key);\n\n  return stored ? deserialze(stored) : initial;\n};\n\nconst saveState = (key, value) => localStorage.setItem(key, serialize(value));\n\nexport const useRememberedState = (name, initial) => {\n  const key = useRef(name);\n\n  const [state, setState] = useState(() => loadState(key.current, initial));\n\n  useEffect(() => {\n    saveState(key.current, state);\n  }, [state]);\n\n  return [state, setState];\n};\n","export const ConfigKeys = {\n  AUTH: 'AUTH',\n  SELECTED_REPOS: 'SELECTED_REPOS',\n};\n","import React, { createContext, useContext, useMemo } from 'react';\nimport { useSelectedRepos } from './useSelectedRepos';\nimport { useAuth } from './useAuth';\n\nconst ConfigContext = createContext();\n\nexport const useConfig = () => useContext(ConfigContext);\n\nexport const ConfigController = ({ children }) => {\n  const auth = useAuth();\n  const selectedRepos = useSelectedRepos();\n\n  const config = useMemo(() => ({ auth, selectedRepos }), [\n    auth,\n    selectedRepos,\n  ]);\n\n  return (\n    <ConfigContext.Provider value={config}>{children}</ConfigContext.Provider>\n  );\n};\n","import { ConfigKeys } from './ConfigKeys';\nimport { useRememberedState } from '../../hooks/useRememberedState';\nimport { useMemo } from 'react';\n\nexport const useAuth = () => {\n  const [token, setToken] = useRememberedState(ConfigKeys.AUTH, '');\n\n  return useMemo(\n    () => ({\n      token,\n      setToken,\n    }),\n    [token, setToken],\n  );\n};\n","import { useMemo } from 'react';\nimport { useRememberedState } from '../../hooks/useRememberedState';\nimport { ConfigKeys } from './ConfigKeys';\nimport { mapToGroups } from '../../helpers/mapToGroups';\n\nexport const useSelectedRepos = () => {\n  const [repos, setRepos] = useRememberedState(ConfigKeys.SELECTED_REPOS, []);\n\n  const groupedRepos = useMemo(\n    () => mapToGroups(repos, repo => repo.owner.login),\n    [repos],\n  );\n\n  const repoKeys = useMemo(() => repos.map(repo => repo.nameWithOwner), [\n    repos,\n  ]);\n\n  return useMemo(\n    () => ({\n      repos,\n      groupedRepos,\n      repoKeys,\n\n      containsRepo(repo) {\n        return repoKeys.includes(repo.nameWithOwner);\n      },\n\n      addRepo(repo) {\n        setRepos(rs => [...rs, repo]);\n      },\n\n      removeRepo(repo) {\n        setRepos(rs => rs.filter(r => r.nameWithOwner !== repo.nameWithOwner));\n      },\n    }),\n    [repos, groupedRepos, repoKeys, setRepos],\n  );\n};\n","export const mapToGroups = (arr, keyGetter) =>\n  arr.reduce((acc, item, index) => {\n    const key = keyGetter(item, index);\n\n    if (acc[key]) {\n      acc[key].push(item);\n    } else {\n      acc[key] = [item];\n    }\n\n    return acc;\n  }, {});\n","import React, { useMemo } from 'react';\nimport { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { useConfig } from './components/ConfigController/ConfigController';\n\nexport const Apollo = ({ children }) => {\n  const {\n    auth: { token },\n  } = useConfig();\n\n  const cache = useMemo(() => new InMemoryCache(), []);\n  const link = useMemo(\n    () =>\n      new HttpLink({\n        uri: 'https://api.github.com/graphql',\n        headers: {\n          authorization: `bearer ${token}`,\n        },\n      }),\n    [token],\n  );\n\n  const client = useMemo(() => new ApolloClient({ link, cache }), [\n    link,\n    cache,\n  ]);\n\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n};\n","import { useMemo } from 'react';\n\nexport const useTailwind = styleSheet => {\n  return useMemo(() => {\n    return Object.entries(styleSheet).reduce((acc, [key, styles]) => {\n      acc[key] = Array.isArray(styles) ? styles.join(' ') : styles;\n\n      return acc;\n    }, {});\n  }, [styleSheet]);\n};\n","import React from 'react';\nimport { useStyles } from './Layout.styles';\n\nexport const Layout = ({ children }) => {\n  const styles = useStyles();\n\n  return <div className={styles.container}>{children}</div>;\n};\n","import { useTailwind } from '../hooks/useTailwind';\n\nexport const useStyles = () =>\n  useTailwind({\n    container: `\n      px-8 max-w-5xl mx-auto h-full\n    `,\n  });\n","import { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst USER_REPOS = gql`\n  {\n    viewer {\n      repositories(\n        first: 12\n        affiliations: [OWNER, ORGANIZATION_MEMBER, COLLABORATOR]\n        ownerAffiliations: [OWNER, ORGANIZATION_MEMBER, COLLABORATOR]\n        orderBy: { field: UPDATED_AT, direction: DESC }\n      ) {\n        nodes {\n          name\n          nameWithOwner\n          owner {\n            login\n            avatarUrl\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const useUserRepos = () => {\n  const { data, ...rest } = useQuery(USER_REPOS);\n\n  return {\n    data,\n    repos: data ? data.viewer.repositories.nodes : null,\n    ...rest,\n  };\n};\n","import React from 'react';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport { useStyles } from './RepoList.styles';\n\nimport './RepoList.css';\n\nexport const RepoList = ({ repos, onRepoClick = null, removable = false }) => {\n  const styles = useStyles();\n\n  return (\n    <TransitionGroup className={styles.repos}>\n      {repos.map(repo => (\n        <CSSTransition key={repo.nameWithOwner} timeout={200} classNames=\"item\">\n          <button\n            className={styles.repo}\n            onClick={onRepoClick ? onRepoClick(repo) : null}\n          >\n            <div className={styles.imageContainer}>\n              <img\n                src={repo.owner.avatarUrl}\n                className={styles.image}\n                alt={repo.nameWithOwner}\n              />\n\n              {removable ? (\n                <div className={styles.removeOverlay}>\n                  <p className={styles.removeIcon}>✕</p>\n                </div>\n              ) : null}\n            </div>\n            <p className={styles.text}>{repo.nameWithOwner}</p>\n          </button>\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\n","import { useTailwind } from '../hooks/useTailwind';\n\nexport const useStyles = () =>\n  useTailwind({\n    repos: `\n        flex flex-row items-center justify-center flex-wrap\n    `,\n\n    repo: `\n        bg-gray-400 inline-block whitespace-no-wrap\n        m-1 rounded-full p-1 pr-3\n        flex flex-row items-center\n        text-gray-800\n\n        hover:bg-gray-500\n        focus:outline-none\n        focus:bg-purple-300\n\n        focus:text-purple-800\n    `,\n\n    imageContainer: `\n        relative mr-2 rounded-full overflow-hidden\n    `,\n\n    removeOverlay: `\n        absolute top-0 bottom-0 right-0 left-0\n        bg-gray-600\n        flex items-center justify-center\n        opacity-75\n    `,\n\n    removeIcon: 'text-gray-200 text-xs leading-none',\n\n    image: `\n        w-6 h-6\n    `,\n\n    text: `\n        text-sm leading-none font-semibold\n    `,\n  });\n","import React from 'react';\nimport { useUserRepos } from '../hooks/queries/useUserRepos';\n\nimport { useConfig } from './ConfigController/ConfigController';\nimport { RepoList } from './RepoList';\nimport { useStyles } from './RepoPicker.styles';\n\nexport const RepoPicker = ({ onChoose }) => {\n  const { loading, repos, error } = useUserRepos();\n  const { selectedRepos } = useConfig();\n  const styles = useStyles();\n\n  const handleChoose = repo => e => {\n    e.preventDefault();\n\n    selectedRepos.addRepo(repo);\n  };\n\n  const removeRepo = repo => e => {\n    e.preventDefault();\n\n    selectedRepos.removeRepo(repo);\n  };\n\n  return (\n    <div className={styles.container}>\n      <p className={styles.text}>\n        Get started by picking some repos you want to see:\n      </p>\n      {loading ? (\n        <p>Loading...</p>\n      ) : error ? (\n        <p>something went wrong...</p>\n      ) : (\n        <>\n          <RepoList\n            repos={repos.filter(r => !selectedRepos.containsRepo(r))}\n            onRepoClick={handleChoose}\n          />\n\n          {selectedRepos.repos.length > 0 ? (\n            <>\n              <p className={styles.text}>Selected:</p>\n              <RepoList\n                repos={selectedRepos.repos}\n                onRepoClick={removeRepo}\n                removable\n              />\n            </>\n          ) : null}\n        </>\n      )}\n    </div>\n  );\n};\n","import { useTailwind } from '../hooks/useTailwind';\n\nexport const useStyles = () =>\n  useTailwind({\n    text: `\n        mb-2 mt-4 text-gray-900 font-light\n    `,\n  });\n","import React, { useState } from 'react';\nimport { useConfig } from './ConfigController/ConfigController';\nimport { useStyles } from './TokenGate.styles';\n\nexport const TokenGate = ({ children }) => {\n  const { auth } = useConfig();\n  const styles = useStyles();\n\n  const [token, setToken] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    auth.setToken(token);\n  };\n\n  return auth.token ? (\n    children\n  ) : (\n    <div className={styles.container}>\n      <p className={styles.text}>\n        Welcome! Before you can get started, you need to supply us with a\n        Personal Access Token so we can see your repositories.\n        <br />\n        <a\n          href=\"https://github.com/settings/tokens/new?scopes=repo&description=git-dash\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={styles.link}\n        >\n          Click here to generate one on Github.\n        </a>\n      </p>\n\n      <form onSubmit={handleSubmit} className={styles.form}>\n        <input\n          type=\"text\"\n          value={token}\n          onChange={e => setToken(e.target.value)}\n          placeholder=\"Paste PAT Here\"\n          className={styles.input}\n        />\n\n        <button type=\"submit\" className={styles.button}>\n          Go\n        </button>\n      </form>\n    </div>\n  );\n};\n","import { useTailwind } from '../hooks/useTailwind';\n\nexport const useStyles = () =>\n  useTailwind({\n    container: `\n        flex flex-col items-center justify-center h-full\n    `,\n\n    text: `\n        text-center max-w-md\n        text-gray-800 mb-4\n    `,\n\n    link: `\n        text-purple-600 font-semibold\n    `,\n\n    form: `\n        shadow-lg rounded\n    `,\n\n    input: `\n        w-56 h-12 px-4 rounded-l\n        border border-gray-400 border-r-0\n        focus:outline-none\n        focus:border-purple-600\n    `,\n\n    button: `\n        h-12 px-4 bg-purple-600 text-purple-100 rounded-r\n        border border-purple-800 border-l-0\n    `,\n  });\n","import React from 'react';\nimport ChatBubbleRoundedIcon from '@material-ui/icons/ChatBubbleRounded';\nimport RateReviewRoundedIcon from '@material-ui/icons/RateReviewRounded';\nimport CheckRoundedIcon from '@material-ui/icons/CheckRounded';\nimport { useStyles } from './StatusIcon.styles';\n\nexport const StatusIcon = ({ status, ...props }) => {\n  const styles = useStyles();\n  const Icon = {\n    COMMENTED: ChatBubbleRoundedIcon,\n    CHANGES_REQUESTED: RateReviewRoundedIcon,\n    APPROVED: CheckRoundedIcon,\n  }[status];\n\n  const bgClass = {\n    COMMENTED: `bg-white`,\n    CHANGES_REQUESTED: `bg-red-500`,\n    APPROVED: `bg-green-600`,\n  }[status];\n\n  const textClass = {\n    COMMENTED: `text-gray-600`,\n    CHANGES_REQUESTED: `text-red-100`,\n    APPROVED: `text-green-100`,\n  }[status];\n\n  return (\n    <div\n      className={`${bgClass} ${textClass} ${styles.container}`}\n      style={{ right: '-.75rem', bottom: '-.75rem' }}\n    >\n      <Icon className={styles.icon} fontSize=\"inherit\" />\n    </div>\n  );\n};\n","import { useTailwind } from '../../hooks/useTailwind';\n\nexport const useStyles = () =>\n  useTailwind({\n    container: `\n        w-8 h-8 absolute\n        flex items-center justify-center\n        rounded-full shadow\n    `,\n\n    icon: `\n        leading-none font-xs\n    `,\n  });\n","import { useMemo } from 'react';\n\nconst hexToRgb = hex => {\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  const fullHex = hex.replace(shorthandRegex, (m, r, g, b) =>\n    [r, r, g, g, b, b].join(''),\n  );\n\n  const [, r, g, b] = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(fullHex);\n\n  return [r, g, b].map(n => parseInt(n, 16));\n};\n\nexport const getContrastingColor = color => {\n  const [r, g, b] = hexToRgb(color);\n\n  const o = Math.round((r * 299 + g * 587 + b * 114) / 1000);\n  return o > 125 ? 'rgba(0, 0, 0, 0.8)' : 'rgba(255, 255, 255, 0.9)';\n};\n\nexport const useContrastingColor = color =>\n  useMemo(() => {\n    return getContrastingColor(color);\n  }, [color]);\n","import React from 'react';\nimport { useStyles } from './Labels.styles';\nimport { getContrastingColor } from '../../hooks/useContrastingColor';\n\nexport const Labels = ({ labels }) => {\n  const styles = useStyles();\n\n  return (\n    <div className={styles.container}>\n      {labels.map(label => (\n        <p\n          key={label.name}\n          className={styles.tag}\n          style={{\n            background: `#${label.color}`,\n            color: getContrastingColor(label.color),\n          }}\n        >\n          {label.name}\n        </p>\n      ))}\n    </div>\n  );\n};\n","import { useTailwind } from '../../hooks/useTailwind';\n\nexport const useStyles = () =>\n  useTailwind({\n    container: `\n        flex flex-row items-center\n    `,\n\n    tag: `\n        leading-none text-xs px-2 py-1\n        rounded-full font-semibold\n        shadow-inner mr-1\n    `,\n  });\n","import React from 'react';\nimport { parseISO, format } from 'date-fns';\nimport { useStyles } from './PullRequest.styles';\nimport { StatusIcon } from './StatusIcon';\nimport { Labels } from './Labels';\n\nexport const PullRequest = ({ pullRequest }) => {\n  const styles = useStyles();\n\n  const created = format(parseISO(pullRequest.createdAt), 'do MMM HH:mm');\n  const updated = format(parseISO(pullRequest.updatedAt), 'do MMM HH:mm');\n\n  return (\n    <div className={styles.pullRequest} key={pullRequest.id}>\n      <div className={styles.titleBar}>\n        <div>\n          <div className={styles.preTitle}>\n            <div className={styles.owner}>\n              <img\n                src={pullRequest.repository.owner.avatarUrl}\n                alt={pullRequest.repository.nameWithOwner}\n                className={styles.ownerAvatar}\n              />\n              <p className={styles.repo}>\n                {pullRequest.repository.nameWithOwner}\n              </p>\n            </div>\n\n            <Labels labels={pullRequest.labels.nodes} />\n          </div>\n          <p className={styles.title}>\n            <a href={pullRequest.permalink}>{pullRequest.title}</a>\n          </p>\n        </div>\n\n        <div className={styles.author}>\n          <img\n            src={pullRequest.author.avatarUrl}\n            alt={pullRequest.author.login}\n            className={styles.authorAvatar}\n          />\n          <p className={styles.authorName}>{pullRequest.author.login}</p>\n        </div>\n      </div>\n\n      <p className={styles.timestamps}>\n        created {created}, last updated {updated}\n      </p>\n\n      <div className={styles.reviewers}>\n        {pullRequest.reviews.nodes\n          .filter(review => review.state !== 'COMMENTED')\n          .map(review => (\n            <div\n              className={styles.review}\n              key={review.id}\n              title={`Created ${format(\n                parseISO(review.createdAt),\n                'do MMM HH:mm',\n              )}`}\n            >\n              <img\n                src={review.author.avatarUrl}\n                alt={review.author.login}\n                className={styles.reviewerAvatar}\n              />\n              <StatusIcon status={review.state} />\n            </div>\n          ))}\n      </div>\n\n      {/* <pullRequeste>{JSON.stringify(pullRequest, null, 2)}</pullRequeste> */}\n    </div>\n  );\n};\n","import { useTailwind } from '../../hooks/useTailwind';\n\nexport const useStyles = () =>\n  useTailwind({\n    pullRequest: `\n        p-6\n        border-b border-gray-300\n    `,\n\n    preTitle: `\n        flex flex-row items-center mb-2\n    `,\n\n    owner: `\n        flex flex-row items-center\n    `,\n\n    ownerAvatar: `\n        w-6 h-6 rounded-full shadow mr-1\n    `,\n\n    repo: `\n        text-base text-gray-800 leading-none mr-2\n    `,\n\n    titleBar: `\n        flex flex-row justify-between items-center mb-1\n    `,\n\n    title: `\n        text-gray-900 font-semibold text-lg\n    `,\n\n    author: `\n        inline-flex flex-row items-center\n        relative\n        bg-gray-400 rounded-full py-2 pl-3 pr-12\n        shadow-inner\n    `,\n\n    authorAvatar: `\n        w-10 h-10 rounded-full\n        absolute right-0\n        shadow\n    `,\n\n    authorName: `\n        text-sm leading-none text-gray-900 whitespace-no-wrap\n    `,\n\n    timestamps: `\n        text-sm leading-none text-gray-700\n    `,\n\n    reviewers: `\n        flex flex-row mt-3\n    `,\n\n    review: `\n        relative mr-4\n    `,\n\n    reviewerAvatar: `\n        w-10 h-10 rounded-full\n        shadow\n    `,\n\n    reviewStatus: `\n        absolute\n    `,\n  });\n","import React from 'react';\nimport { useConfig } from '../ConfigController/ConfigController';\nimport { PullRequest } from './PullRequest';\nimport { useStyles } from './PullRequests.styles';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n\nconst GET_PULL_REQUESTS = gql`\n  query PullRequests($query: String!) {\n    search(query: $query, type: ISSUE, last: 100) {\n      nodes {\n        ... on PullRequest {\n          id\n          title\n          createdAt\n          updatedAt\n          permalink\n          author {\n            login\n            avatarUrl\n          }\n          repository {\n            nameWithOwner\n            owner {\n              avatarUrl\n            }\n          }\n          labels(first: 15) {\n            nodes {\n              name\n              color\n            }\n          }\n          reviews(last: 100) {\n            nodes {\n              id\n              createdAt\n              state\n              author {\n                login\n                avatarUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const PullRequests = () => {\n  const { selectedRepos } = useConfig();\n  const styles = useStyles();\n\n  const query =\n    'is:pr is:open ' +\n    selectedRepos.repos.map(r => `repo:${r.nameWithOwner}`).join(' ');\n  const { loading, error, data } = useQuery(GET_PULL_REQUESTS, {\n    variables: { query },\n  });\n\n  return loading ? (\n    <p>Loading...</p>\n  ) : error ? (\n    <p>Something went wrong...</p>\n  ) : (\n    <div className={styles.pullRequests}>\n      {data.search.nodes.map(pullRequest => (\n        <PullRequest pullRequest={pullRequest} key={pullRequest.id} />\n      ))}\n      {/* <pre>{JSON.stringify(data, null, 2)}</pre> */}\n    </div>\n  );\n};\n","import { useTailwind } from '../../hooks/useTailwind';\n\nexport const useStyles = () =>\n  useTailwind({\n    pullRequests: `\n        bg-gray-100 my-4 shadow-sm rounded border border-gray-300\n    `,\n  });\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nimport './styles.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React from 'react';\nimport { Apollo } from './Apollo';\n// import { Test } from './Test';\nimport { Layout } from './components/Layout';\nimport { RepoPicker } from './components/RepoPicker';\nimport { ConfigController } from './components/ConfigController/ConfigController';\nimport { TokenGate } from './components/TokenGate';\nimport { PullRequests } from './components/PullRequests/PullRequests';\n\nexport const App = () => {\n  return (\n    <ConfigController>\n      <Layout>\n        <TokenGate>\n          <Apollo>\n            <RepoPicker />\n            {/* <Test /> */}\n            <PullRequests />\n          </Apollo>\n        </TokenGate>\n      </Layout>\n    </ConfigController>\n  );\n};\n"],"sourceRoot":""}